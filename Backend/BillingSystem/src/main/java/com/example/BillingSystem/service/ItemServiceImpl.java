package com.example.BillingSystem.service;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import com.example.BillingSystem.exception.BillingSystemAlreadyExist;
import com.example.BillingSystem.exception.BillingSystemInternalException;
import com.example.BillingSystem.exception.BillingSystemNotFoundException;
import com.example.BillingSystem.model.Item;
import com.example.BillingSystem.repository.ItemRepository;
import java.util.List;
@Service
public class ItemServiceImpl implements ItemService {

    private final ItemRepository itemRepository;

    public ItemServiceImpl(ItemRepository itemRepository) {
        this.itemRepository = itemRepository;
    }

       /**
 * Adds a new item to the database if no existing item has the same name.
 *
 * @throws BillingSystemAlreadyExist if an item with the same name already exists.
 */
    @Override
    public Item addItem(Item item) {
        try {
            // Check if the item with the same name already exists
            if (itemRepository.existsByName(item.getName())) {
                throw new BillingSystemAlreadyExist("Item name already exists");
            }

            // Save the item to the database
            int save = itemRepository.save(item); // Save and return the saved item
            if (save == 0) {
                throw new BillingSystemInternalException("Failed to save item due to internal DB error");
            }

            return item; // Return the saved item with its ID (if autogenerated)
        } catch (DataAccessException e) {
            throw new BillingSystemInternalException("Database error while saving item: " + e.getMessage());
        }
    }

       /**
 * Updates the given item after verifying its existence in the database.
 * 
 * @throws BillingSystemNotFoundException if the item ID does not exist.
 * @throws BillingSystemInternalException if there is an internal DB error (e.g., JDBC connection failure).
 */
    @Override
    public Item UpdateItem(Item item) {
        try {
            if (!itemRepository.existsById(item.getItemId())) {
                throw new BillingSystemNotFoundException("Item does not exist");
            }

            int result = itemRepository.update(item);
            if (result == 0) {
                throw new BillingSystemInternalException("Failed to update item due to internal DB error");
            }

            return item;
        } catch (DataAccessException e) {
            throw new BillingSystemInternalException("Database error while updating item: " + e.getMessage());
        }
    }
    // Get the given item after checking if it exist in the database
    @Override
    public List<Item> getAllItems() {
        try {
            List<Item> items = itemRepository.findAll();
            if (items.isEmpty()) {
                throw new BillingSystemInternalException("Failed to fetch items due to internal DB error");
            }
            return items;
        } catch (DataAccessException e) {
            throw new BillingSystemInternalException("Database error while fetching items: " + e.getMessage());
        }
    }

     
    /**
 * Deletes the given item after verifying its existence in the database.
 * 
 * @throws BillingSystemNotFoundException if the item ID does not exist.
 * @throws BillingSystemInternalException if there is an internal DB error (e.g., JDBC connection failure).
 */
   @Override
    public Item DeleteItem(Item item) {
        try {
            if (!itemRepository.existsById(item.getItemId())) {
                throw new BillingSystemNotFoundException("Item does not exist");
            }

            int result = itemRepository.delete(item);
            if (result == 0) {
                throw new BillingSystemInternalException("Failed to delete item due to internal DB error");
            }

            return item;
        } catch (DataAccessException e) {
            throw new BillingSystemInternalException("Database error while deleting item: " + e.getMessage());
        }
    }
}
